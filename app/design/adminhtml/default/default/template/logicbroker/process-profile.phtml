<?php
/**
 * Logicbroker
 *
 * @category    Community
 * @package     Logicbroker_Dropship360
 */
?>
<style type="text/css" >
    ul { list-style-type:none; padding:0; margin:0; }
    li { margin-left:0; border:1px solid #ccc; margin:2px; padding:2px 2px 2px 2px; font:normal 12px sans-serif; }
    img { margin-right:5px; }
</style>
<script type="text/javascript">
    var FORM_KEY = "<?php echo $this->getFormKey();?>";
</script>
   <?php if($this->isManualUploadRunning()){ ?> 
    	<ul>
        <li>
        	<img src="<?php echo $this->getSkinUrl('images/error_msg_icon.gif');?>" class="v-middle" style="margin-right:5px"/>
            <?php echo $this->__("Manual upload is currently running please try again later");?>
        </li>
    </ul>
    <?php }else{  ?>
    <ul>
        <li>
        <?php if ($this->getBulkVendorCode()):?>
            <img src="<?php echo $this->getSkinUrl('images/note_msg_icon.gif')?>" class="v-middle" style="margin-right:5px"/>
            <?php echo $this->__("Starting bulk profile execution, please wait...");?>
            </li>
            <li style="background-color:#FFD;">
            <img src="<?php echo $this->getSkinUrl('images/fam_bullet_error.gif');?>" class="v-middle" style="margin-right:5px"/>
            <?php echo $this->__("Warning: Please do not close the window during importing/exporting data");?>
        <?php else:?>
            <img src="<?php echo $this->getSkinUrl('images/error_msg_icon.gif');?>" class="v-middle" style="margin-right:5px"/>
            <?php echo $this->__("No profile loaded...");?>
        <?php endif;?>
        </li>
    </ul>

    <?php if ($this->getBulkVendorCode()):?>
    <ul id="profileRows">
		 <li id="liNoproduct" style="display:none;">
            <img src="<?php echo $this->getSkinUrl('images/note_msg_icon.gif');?>" class="v-middle" style="margin-right:5px"/>
            <?php echo $this->__("No simple product found");?>
            </li>
          <li id="liFinished" style="display:none;">
            <img src="<?php echo $this->getSkinUrl('images/note_msg_icon.gif');?>" class="v-middle" style="margin-right:5px"/>
            <?php echo $this->__("Finished bulk profile execution.");?>
            </li>
			<li id="liFinishederror" style="display:none;">
            <img src="<?php echo $this->getSkinUrl('images/fam_bullet_error.gif');?>" class="v-middle" style="margin-right:5px"/>
            <?php echo $this->__("Bulk profile execution hault due to error");?>
            </li>
			<li id="get_csv" style="display:none;">
            <img src="<?php echo $this->getSkinUrl('images/note_msg_icon.gif');?>" class="v-middle" style="margin-right:5px"/>
            <button onclick = "genrateCSV()"><?php echo $this->__("Download Failed Sku Csv");?></button>
            </li>
			<li id="get_csv_success" style="display:none;">
            <img src="<?php echo $this->getSkinUrl('images/note_msg_icon.gif');?>" class="v-middle" style="margin-right:5px"/>
            <button onclick = "genrateCSV('success')"><?php echo $this->__("Download Success Sku Csv");?></button>
            </li>
            </ul>
            <?php if ($this->getBatchModel() > 0):?>
                
                <script type="text/javascript">
                    var countOfStartedProfiles = 0;
                    var countOfUpdated = 0;
                    var countOfError = 0;
                    var importData = [];
                    var totalRecords = <?php echo $this->getBatchItemsCount();?>;
                    var config= <?php echo $this->getBatchConfigJson();?>;
					var errorSku = [];
					var successSku = [];
					var successSkuCount = 0;
                </script>
                <script type="text/javascript">
				
					window.onbeforeunload = function (evt) {
						if(importData.length == 0){
								return null;
							}
						 new Ajax.Request("<?php echo $this->getUrl('*/*/batchFinish', array('exeuctionTerminated' => 1));?>", {
                                method: "post",
                                parameters: {form_key: FORM_KEY,sucees_sku:successSkuCount,errorSkuCount:errorSku.length,lb_vendor_code:'<?php echo Mage::registry('bulk_vendor_Code') ?>'},
								asynchronous : true,
							});
							
							return;
					}
					
                    function addImportData(data) {
                        importData.push(data);
                    }

                    function execImportData() {
                        if (importData.length == 0) {
                            $("updatedRows_img").src = config.styles.message.icon;
                            $("updatedRows").style.backgroundColor = config.styles.message.bg;
                            Element.insert($("liFinished"), {before: config.tpl.evaluate({
                                style: "background-color:"+config.styles.message.bg,
                                image: config.styles.message.icon,
                                text: config.tplSccTxt.evaluate({updated:(countOfUpdated-countOfError)}),
                                id: "updatedFinish"
                            })});

                            if ($("liBeforeFinish")) {
                                Element.insert($("liFinished"), {before: $("liBeforeFinish")});
                                $("liBeforeFinish").show();
                            }

                            new Ajax.Request("<?php echo $this->getUrl('*/*/batchFinish', array('exeuctionTerminated' => 0));?>", {
                                method: "post",
                                parameters: {form_key: FORM_KEY,sucees_sku:successSkuCount,errorSkuCount:errorSku.length,lb_vendor_code:'<?php echo Mage::registry('bulk_vendor_Code') ?>'},
                                onComplete: function(transport) {
                                    if (transport.responseText.isJSON()) {
                                        var response = transport.responseText.evalJSON();
                                        if (response.error) {
                                            Element.insert($("liFinished"), {before: config.tpl.evaluate({
                                                style: "background-color:"+config.styles.error.bg,
                                                image: config.styles.error.icon,
                                                text: response.error.escapeHTML(),
                                                id: "error-finish"
                                            })});
                                        }
                                    }

                                    if ($("before-finish-wait-img")) {
                                        $("before-finish-wait-img").hide();
                                    }

                                    $('liFinished').show();
									if(errorSku.length > 0)
										{
											 $('get_csv').show();
											 
										}
									if(successSku.length > 0)
										{
											 $('get_csv_success').show();
										}	
                                },
								onFailure:function(){
									alert('Not able to connect to server');
									$('liFinishederror').show();
								}
                            });
                        } else {
                            sendImportData(importData.shift());
                        }
                    }

                    function sendImportData(data) {
                        if (!config.tpl) {
                            config.tpl = new Template(config.template);
                            config.tplTxt = new Template(config.text);
                            config.tplSccTxt = new Template(config.successText);
                        }
                        if (!$("updatedRows")) {
                            Element.insert($("liFinished"), {before: config.tpl.evaluate({
                                style: "background-color: #FFD;",
                                image: config.styles.loader,
                                text: config.tplTxt.evaluate({updated:countOfUpdated, percent:getPercent()}),
                                id: "updatedRows"
                            })});
                        }
                        countOfStartedProfiles++;
                        if (!data.form_key) {
                            data.form_key = FORM_KEY;
                        }

                        new Ajax.Request("<?php echo $this->getUrl('*/*/batchRun');?>", {
                          method: "post",
                          parameters: data,
                          onSuccess: function(transport) {
                            countOfStartedProfiles --;
                            countOfUpdated += data["rows[]"].length;
                            if (transport.responseText.isJSON()) {
                                addProfileRow(transport.responseText.evalJSON());
                            } else {
                                Element.insert($("updatedRows"), {before: config.tpl.evaluate({
                                    style: "background-color:"+config.styles.error.bg,
                                    image: config.styles.error.icon,
                                    text: transport.responseText.escapeHTML(),
                                    id: "error-" + countOfStartedProfiles
                                })});
                                countOfError += data["rows[]"].length;
                            }
                            execImportData();
                          },
							onFailure:function(){
									alert('Not able to connect to server');
									$('liFinishederror').show();
								}
                        });
                    }

                    function getPercent() {
                        return Math.ceil((countOfUpdated/totalRecords)*1000)/10;
                    }

                    function addProfileRow(data) {
                        if (data.errors.length > 0) {
                            for (var i=0, length=data.errors.length; i<length; i++) {
                                Element.insert($("updatedRows"), {before: config.tpl.evaluate({
                                    style: "background-color:"+config.styles.error.bg,
                                    image: config.styles.error.icon,
                                    text: data.errors[i],
                                    id: "id-" + (countOfUpdated + i + 1)
                                })});
                                countOfError ++;
								errorSku.push(data.skuError[i]);
                            }
                        }
                        $("updatedRows_status").update(config.tplTxt.evaluate({updated:countOfUpdated, percent:getPercent()}));
						if (data.savedRows > 0) {
                           successSkuCount += data.savedRows;
						   for (var i=0, length=data.skuSuccess.length; i<length; i++) {
                                successSku.push(data.skuSuccess[i]);
                            }
						  
						   }
                           
                        
                    }
					
					function genrateCSV(type){
					
						var csvContent;
						var sku = (type == 'success') ? successSku : errorSku;
						csvContent = prepareCSVcontent(sku,type)
						var encodedUri = encodeURI(csvContent);
						var link = document.createElement("a");
						if (link.download !== undefined){
						link.setAttribute("href", encodedUri);
						link.setAttribute("download", "my_data.csv");
						document.body.appendChild(link);
						link.click();
						document.body.removeChild(link);
						}else
						{
							alert('CSV export only works in Chrome, Firefox, and Opera.');
						}
					
					}
					
					function prepareCSVcontent(sku,type){
						
						if(sku.length < 0)
					{
						return;
					}
						var headerTitle = (type == 'success') ? 'Success Sku' : 'Failed Sku';
						var csvContent = "data:text/csv;charset=utf-8,";
						if(sku[0] != headerTitle) sku.unshift(headerTitle);
						for(var i=0;i<sku.length;i++)
						{
							if(sku[i] !== 'undefined')
							csvContent += sku[i]+ "\n";
						}
						return csvContent;
					
					}
                </script>
                <?php $importData = $this->getImportData();?>
                <script type="text/javascript">
                    <?php foreach ($importData as  $importValue):?>
                    addImportData(<?php echo $this->jsonEncode($importValue);?>);
                    <?php endforeach;?>
                    execImportData();
                </script>
                <?php else: ?>
					<script type="text/javascript">$('liNoproduct').show();</script>
                <?php endif;?>
          
            <?php if ($this->getShowFinished()):?>
                <script type="text/javascript">$('liFinished').show();</script>
            <?php endif;?>
   <?php endif;?>
   <?php  } ?>
