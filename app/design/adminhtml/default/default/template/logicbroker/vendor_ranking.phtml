<?php $dropshipVendorCollection = $this->getVendorCollection('yes'); ?>
<?php $nonDropshipVendorCollection = $this->getVendorCollection('no'); ?>
<style type="text/css">


</style>
<div class="content-header">
    <table cellspacing="0">
        <tr>
            <td style="<?php echo $this->getHeaderWidth() ?>"><?php echo $this->getHeaderHtml() ?></td>
            <td class="form-buttons"><?php echo $this->getButtonsHtml() ?></td>
        </tr>
    </table>
</div>
<?php if(Mage::getStoreConfig('logicbroker_sourcing/rank/ranktype') == 'cost'): ?>
<div id="warning-message"><ul class="messages"><li class="warning-msg"><ul><li><span>Cost Based sourcing rule is currently selected. Vendor ranking will only take effect when Rank Based sourcing rule is selected in the Sourcing Configuration page.</span></li></ul></li></ul></div>
<?php endif; ?>
<div id="notice-message"><ul class="messages"><li class="notice-msg"><ul><li><span>To remove a Active Vendor from dropship360 sourcing rule, drag it to the Non Active Vendor section on the right. To activate that vendor again, simply drag it back to the Active Vendor section.</span></li></ul></li></ul></div>
<div id="message"><ul class="messages"><li class="error-msg"><ul><li><span>You Have Unsubmitted Changes.</span></li></ul></li></ul></div>
<div id="panel"></div>
<script type="text/javascript">
var arrVendorName = [];
var arrDropship = <?php echo $dropshipVendorCollection['arrayData'] ?>;
var arrNonDropship = <?php echo $nonDropshipVendorCollection['arrayData'] ?>;
var addNew = 1;
$('message').hide();

Ext.require([
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.dd.*'
]);

Ext.define('DataObject', {
    extend: 'Ext.data.Model',
    fields: ['name', 'code']
});

Ext.onReady(function(){

    /*var myData = [
        { name : "Rec 0", column1 : "0", column2 : "0" },
        { name : "Rec 1", column1 : "1", column2 : "1" },
        { name : "Rec 2", column1 : "2", column2 : "2" },
        { name : "Rec 3", column1 : "3", column2 : "3" },
        { name : "Rec 4", column1 : "4", column2 : "4" },
        { name : "Rec 5", column1 : "5", column2 : "5" },
        { name : "Rec 6", column1 : "6", column2 : "6" },
        { name : "Rec 7", column1 : "7", column2 : "7" },
        { name : "Rec 8", column1 : "8", column2 : "8" },
        { name : "Rec 9", column1 : "9", column2 : "9" }
    ];*/
	
	var dropShipData = <?php echo $dropshipVendorCollection['gridData'] ?>
    // create the data store
    var firstGridStore = Ext.create('Ext.data.Store', {
        model: 'DataObject',
        data: dropShipData,
	});


    // Column Model shortcut array
    var columns1 = [
		Ext.create('Ext.grid.RowNumberer',{dataIndex:'id',xtype: 'rownumberer',text:'Ranking',align: 'right',width:50}),
		{text: "Vendor Name", flex: 1,hideable:false, sortable: false, dataIndex: 'name',editor : {
                    xtype: 'textfield',
                    allowBlank:false
                }},
		{text: "Vendor Code", flex: 1,hidden:false,hideable:false,sortable: false, dataIndex: 'code'}
    ];

    var columns2 = [
            		//Ext.create('Ext.grid.RowNumberer',{dataIndex:'id',text:'ID'}),
                    {text: "Vendor Name", flex: 1,sortable: false,hideable:false, dataIndex: 'name',editor : {
                    xtype: 'textfield',
                    allowBlank:false
                }},
				{text: "Vendor Code", flex: 1,hidden:false,hideable:false,dataIndex: 'code',sortable: false}
                ];
            	
     // create the destination Grid
	  var rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {
        clicksToMoveEditor: 2,
        autoCancel: false
    });
    // declare the source Grid
    var firstGrid = Ext.create('Ext.grid.Panel', {
        viewConfig: {
            plugins: {
                ptype: 'gridviewdragdrop',
                //dragGroup: 'firstGridDDGroup',
                //dropGroup: 'secondGridDDGroup'
            },
            listeners: {
                drop: function(node, data, dropRec, dropPosition) {
                    //var dropOn = dropRec ? ' ' + dropPosition + ' ' + dropRec.get('name') : ' on empty view';
					var dropName = dropRec ? dropRec.get('code') : '';
					var id = 1;
					
					$$('.x-grid-cell-row-numberer .x-grid-cell-inner ').each(function(item){
						item.innerHTML = id++;
					})
					arrDropship.each(function(item,index){
					
						if(item.code == data.records[0].get('code')){
						arrDropship.splice(index,1);
							//console.log(arrDropship);
						}
					})
					//console.log($$('.x-grid-cell-row-numberer .x-grid-cell-inner '));
					if(dropPosition === 'undefined' || dropName == '')
                    {
					
					arrDropship.push({name:data.records[0].get('name'),code:data.records[0].get('code')});
					
                    }else
					{
						var firstindexLoc;
						arrDropship.each(function(item,index){
					
						if(item.code == dropName){
						firstindexLoc = index
							//console.log(arrDropship);
						}
					})
						
						//var indexLoc = arrDropship.indexOf(dropName);
						if(dropPosition == 'after')
						{
							
							firstindexLoc = firstindexLoc+1;
							arrDropship.splice(firstindexLoc, 0, {name:data.records[0].get('name'),code:data.records[0].get('code')});
							indexLoc = 0;
						}else
						{
						
							arrDropship.splice(firstindexLoc, 0, {name:data.records[0].get('name'),code:data.records[0].get('code')});
							indexLoc = 0;
					
						}
                    }
                    
						var fristIndextemp;
						arrNonDropship.each(function(item,index){
					
						if(item.code == data.records[0].get('code')){
						fristIndextemp = index
							//console.log(arrDropship);
						}
					})
					//var index = arrNonDropship.indexOf(data.records[0].get('name'));
					if (arrNonDropship.length > 0 && fristIndextemp > -1) {
							arrNonDropship.splice(fristIndextemp, 1);
						}
					$('message').show();
						//console.log(arrDropship);
                    //Ext.example.msg("Drag from right to left", 'Dropped ' + data.records[0].get('name') + dropOn);
                }
            }
        },
        store            : firstGridStore,
        columns          : columns1,
        stripeRows       : true,
        title            : 'Active Vendor',
        margins          : '0 2 0 0',
		tbar: [{
            text: 'Add Vendor',
			xtype: 'button',
            iconCls: 'vendor-add',
			handler : function() {
                rowEditing.cancelEdit();

                // Create a model instance
                var r = Ext.create('DataObject', {
                    name: 'New Vendor',
                    code: 'temp_lb_vendor_code',
				});
				//addNew++;
				var rowNumber = ($$('.x-grid-cell-row-numberer .x-grid-cell-inner ').length);
                firstGridStore.insert(rowNumber, r);
                rowEditing.startEdit(rowNumber, 0);
				
				
            }
        }],
		plugins: [rowEditing],
        listeners: {
                edit: function(e, editor) {
				
                        //console.log(editor.record);
						var isAvailable;
						var isNew = false;
						var rowObject = editor.row.getElementsByClassName('x-grid-cell-inner');
						if(rowObject[2].innerHTML.match(/temp_lb_vendor_code/g)){
						var tempClass = editor.row.getElementsByClassName('x-grid-cell')[0].className 
						editor.row.getElementsByClassName('x-grid-cell')[0].className = tempClass+' x-grid-dirty-cell'; 
						//editor.record.dirty = true;
						//secondGrid.setLoading();
						firstGrid.setLoading();
						Ext.Ajax.request({
									url: '<?php echo Mage::getSingleton('adminhtml/url')->getUrl('*/*/addNewVendor') ?>',
									params:{name:editor.record.data['name'],code:rowObject[2].innerHTML,form_key:'<?php echo Mage::getSingleton('core/session')->getFormKey() ?>',rank:$$('.x-grid-cell-row-numberer .x-grid-cell-inner ').length},
									method : 'POST',
									success: function(action){
									var msg_server = Ext.decode(action.responseText);
										if (msg_server.success == true){
											// Great, commit the record to hide the red changed flags
											editor.record.set('code',msg_server.message);
											editor.record.commit();
											//secondGrid.getView().refresh();
											firstGrid.getView().refresh();
											firstGrid.setLoading(false);
											//secondGrid.setLoading(false);
											arrDropship.push({name:editor.record.data['name'],code:msg_server.message});
											isNew = true;
											Ext.Msg.alert('Vendor '+editor.record.data['name']+' Add Successfuly');
											$('message').hide();
											//$('message').show();
											  } 
													},
									failure: function(action){
									isNew = true;
										Ext.Msg.alert('Please Try Again Later');
										firstGrid.setLoading(false);
										}
							});
						}
						if(editor.record.dirty && !isNew){
						if(arrVendorName.length > 0){
							
						
						var removeIndex
						arrVendorName.each(function(item,index){
					
						if(item.code == rowObject[2].innerHTML){
						isAvailable = true
						removeIndex = index
							//console.log(arrDropship);
						}
							})
						}
						if(isAvailable){
								arrVendorName.splice(removeIndex, 1);
								arrVendorName.push({name:editor.record.data['name'],code:rowObject[2].innerHTML})
						}else
						{
							arrVendorName.push({name:editor.record.data['name'],code:rowObject[2].innerHTML})
						}
							$('message').show();}
							
						return;
						
                },
				
			canceledit : function (e, editor){
						var rowObject = editor.row.getElementsByClassName('x-grid-cell-inner');
						if(rowObject[2].innerHTML.match(/temp_lb_vendor_code/g)){
								var sm = firstGrid.getSelectionModel();
								rowEditing.cancelEdit();
								firstGridStore.remove(sm.getSelection());
								if (secondGridStore.getCount() > 0) {
									sm.select(0);
								}
						}
					}
            },
		
		selType: 'rowmodel'
            
    });

	var nonDropShipData = <?php echo $nonDropshipVendorCollection['gridData'] ?>
    // create the data store
    var secondGridStore = Ext.create('Ext.data.Store', {
        model: 'DataObject',
		data: nonDropShipData,
	});

   

	 
    var secondGrid = Ext.create('Ext.grid.Panel', {
        viewConfig: {
            plugins: {
                ptype: 'gridviewdragdrop',
                //dragGroup: 'secondGridDDGroup',
                //dropGroup: 'firstGridDDGroup'
            },
            listeners: {
                drop: function(node, data, dropRec, dropPosition) {
                    //var dropOn = dropRec ? ' ' + dropPosition + ' ' + dropRec.get('name') : ' on empty view';
                    var dropName = dropRec ? dropRec.get('code') : '';
					var code = data.records[0].get('code');
					var id = 1;
					
					$$('.x-grid-cell-row-numberer .x-grid-cell-inner ').each(function(item){
						item.innerHTML = id++;
					})
					if(dropPosition === 'undefined' || dropName == '')
                    {
					
					arrNonDropship.push({name:data.records[0].get('name'),code:data.records[0].get('code')});
					
                    }else
					{
						
						var indexLoc;
						arrDropship.each(function(item,index){
					
						if(item.code == dropName){
						indexLoc = index
							//console.log(arrDropship);
						}
					})
						arrNonDropship.each(function(item,index){
					
						if(item.code == data.records[0].get('code')){
						arrNonDropship.splice(index,1);
							//console.log(arrDropship);
						}
					})
						//var indexLoc = arrNonDropship.indexOf(dropName);
						if(dropPosition == 'after')
						{
							indexLoc = indexLoc+1;
							arrNonDropship.splice(indexLoc, 0, {name:data.records[0].get('name'),code:data.records[0].get('code')});
							indexLoc = 0;
						}else
						{
							arrNonDropship.splice(indexLoc, 0, {name:data.records[0].get('name'),code:data.records[0].get('code')});
							indexLoc = 0;
					
						}
                    }
						
						
					var indextemp;
						arrDropship.each(function(item,index){
					
						if(item.code == data.records[0].get('code')){
						indextemp = index
							//console.log(arrDropship);
						}
					})	
					//var index = arrDropship.indexOf(data.records[0].get('name'));
					if (arrDropship.length > 0 && indextemp > -1) {
							arrDropship.splice(indextemp, 1);
							$('message').show();
						}else
						{
							$('message').hide();
						}
					
						//console.log(arrNonDropship);
                    //Ext.example.msg("Drag from left to right", 'Dropped ' + data.records[0].get('name') + dropOn);
					
                }
            }
        },
        store            : secondGridStore,
        columns          : columns2,
        stripeRows       : true,
        title            : 'Non Active Vendors',
        margins          : '0 0 0 3',
		plugins: [
            Ext.create('Ext.grid.plugin.RowEditing', {
                clicksToEdit : 2,
            listeners: {
                edit: function(editor, e, eOpts) {
				
                        //console.log(e.row.getElementsByClassName('x-grid-cell-inner')[2].innerHTML);
						var isAvailable;
						var rowObject = e.row.getElementsByClassName('x-grid-cell-inner');
						
						if(e.record.dirty){
						if(arrVendorName.length > 0){
						
						
						var removeIndex
						arrVendorName.each(function(item,index){
					
						if(item.code == rowObject[1].innerHTML){
						isAvailable = true
						removeIndex = index
							//console.log(arrDropship);
						}
							})
						}
						if(isAvailable){
								arrVendorName.splice(removeIndex, 1);
								arrVendorName.push({name:e.record.data['name'],code:rowObject[1].innerHTML})
						}else
						{
							arrVendorName.push({name:e.record.data['name'],code:rowObject[1].innerHTML})
						}
							$('message').show();}
						//$('message').show();
						return;
						
                }   
            }
            })
        ],
		selType: 'rowmodel'
    });
	
    //Simple 'border layout' panel to house both grids
    var displayPanel = Ext.create('Ext.Panel', {
        width        : 1205,
        height       : 500,
        layout       : {
            type: 'hbox',
            align: 'stretch',
            padding: 5
        },
        renderTo     : 'panel',
        defaults     : { flex : 1 }, //auto stretch
        items        : [
            firstGrid,
            secondGrid
        ]
    });
    
    
});




</script>

